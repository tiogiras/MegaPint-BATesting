%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 0cc2a39f932640cbae63c0d6cedac53b, type: 3}
  m_Name: 01 Introduction Validators
  m_EditorClassIdentifier: 
  chapter: {fileID: 11400000, guid: e815ad6f26a961642bea1bdaffb3777a, type: 2}
  taskName: Introduction Validators
  taskDescription: 'The last chapter is about the <b>Validators</b> Tool of the MegaPint
    collection.


    This tool adds a type derrived from MonoBehaviour that allows
    the developer to set requirements a certain object or behaviour must fulfill
    in order for it to be marked valid. These requirements can be premade requirements
    or custom written ones.


    To simplify the detection of any issues in the
    project or the open scene the editor window Validator View detects and displays
    all found issues on any behaviour that has requirements set. With this it is
    easy to detect any issue in the project and if setup right to even fix all problems
    with one button press.


    In the following chapter you will be tasked to repair
    various scenes using the validators. For one task you will need to write your
    own code, so please prepare your IDE when asked to.'
  taskRequirements: []
  hasDoableTask: 0
  cannotBeFinishedAutomatically: 0
  scene: {fileID: 0}
  startInPlayMode: 0
  goals: []
  resetObjects: []
  _done: 0
  _neededTime: 0
