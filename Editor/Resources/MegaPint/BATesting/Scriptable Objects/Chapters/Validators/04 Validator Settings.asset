%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 0cc2a39f932640cbae63c0d6cedac53b, type: 3}
  m_Name: 04 Validator Settings
  m_EditorClassIdentifier: 
  chapter: {fileID: 11400000, guid: e815ad6f26a961642bea1bdaffb3777a, type: 2}
  taskName: Validator Settings
  taskDescription: 'To make the usage of requirements and VMB''s more efficiant,
    you can import and export requirements of a VMB. The exported requirements are
    saved as a ScriptableObject which then can be imported on any other VMB.


    When
    fully utalized this can work simmilar to unity''s prefab system, where you create
    a root set of rules that are then applied to all other VMBs. Important to note
    here is, that local requirements will always overwrite imported requirements
    if they are not compatible with each other.


    In the following task you will
    be asked to export and import requirements of any VMB. You can use the given
    "VMB Example" GameObject to do this.'
  taskRequirements: []
  hasDoableTask: 1
  cannotBeFinishedAutomatically: 0
  scene: {fileID: 0}
  startInPlayMode: 0
  goals: []
  resetObjects: []
  _done: 0
  _neededTime: 0
